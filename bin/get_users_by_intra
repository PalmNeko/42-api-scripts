#!/bin/bash

main() {
	check_token
	parse_opts "${@}"
	shift $(( "$OPTIND" - 1 )) # skip options

	ID="$1"
	if [ -z "$ID" ]; then
		err_exit "Error: invalid usage"
		help
	fi
	URL="https://api.intra.42.fr/v2/users/$ID"

	if [ -n "$TABLE_FORMAT" ]; then
		curl -sG -H "Authorization: Bearer $API_TOKEN" "$URL" \
			| print_json_to_table | filter_column | column -t -s $'\t'
	else
		curl -sG -H "Authorization: Bearer $API_TOKEN" ${data[@]} "$URL"
		echo
	fi
}

err_exit() {
	echo "$1" > /dev/stderr
	exit 1
}

check_token() {
	if [ -z "$API_TOKEN" ]; then
		err_exit "You have to set API_TOKEN with 42 api access token"
	fi
}

parse_opts() {

	if [ "$1" = "--help" ]; then
		help
		exit 1
	fi

	declare -ga TARGET_COLUMNS

	# declare
	while getopts s:f:r:i:n:c:t OPT
	do
		case $OPT in
			c)
				TARGET_COLUMNS+=("$OPTARG") ;;
			t)
				TABLE_FORMAT="true" ;;
		esac
	done
}

help() {
	echo "get logged in user" > /dev/stderr
	echo "usage: $(basename "$0") [-t [-c column]] intra" > /dev/stderr
	echo "" > /dev/stderr
	echo "OPTIONS:" > /dev/stderr
	echo "  -t                 Print with table" > /dev/stderr
	echo "  -c column          target column (e.g., 'id' 'name'). need to use with -t option." > /dev/stderr
	echo "  --help             Show this help message" > /dev/stderr
}

print_json_to_table() {
	jq -r '
	def flatten_object(obj; prefix):
		reduce (obj | to_entries[]) as $item
		({}; . + (
			if ($item.value | type) == "object" then
			flatten_object($item.value; prefix + $item.key + ".")
			elif ($item.value | type) == "array" then
			{ (prefix + $item.key): ($item.value | @json) }
			else
			{ (prefix + $item.key): $item.value }
			end
		));

	if type == "array" then
		map(flatten_object(.; "")) as $flat |
		($flat[0] | keys_unsorted) as $keys |
		($keys | @tsv),
		($flat[] | [.[ $keys[] ] | tostring] | @tsv)

	elif type == "object" then
		flatten_object(.; "") as $flat |
		($flat | keys_unsorted) as $keys |
		($keys | @tsv),
		([ $flat[ $keys[] ] | tostring ] | @tsv)

	else
		"Unsupported JSON type"
	end
	'
}

filter_column() {

	if [ -z "${TARGET_COLUMNS[*]}" ]; then
		echo "target"
		cat
	fi
	read -r header
	IFS=$'\t' read -r -a columns <<< "$header"

	# ユーザー指定のカラムに対応するインデックスを探す
	column_indices=()
	for col in "${TARGET_COLUMNS[@]}"; do
		for i in "${!columns[@]}"; do
		column="${columns[$i]}"
		if [[ "${column}" == "$col" ]]; then
			column_indices+=($i)
		fi
		done
	done

	# ヘッダー出力
	for col_index in "${column_indices[@]}"; do
		echo -en "${columns[$((col_index))]}\t"
	done
	echo

	# 値出力
	while IFS= read -r line; do
		IFS=$'\t' read -r -a values <<< "$line"

		for col_index in "${column_indices[@]}"; do
			echo -en "${values[$col_index]}\t"
		done
		echo
	done
}

main "${@}"
